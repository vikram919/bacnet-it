apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'


jar {
    manifest {
        attributes("Implementation-Title": "BACnet/IT")
    }
}

// Maven repositories to look for dependencies
repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

// the project dependencies
dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'commons-configuration:commons-configuration:1.10'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.0.2'
    compile 'io.netty:netty-all:4.1.2.Final'
    compile 'dnsjava:dnsjava:2.1.7'
    compile 'org.slf4j:slf4j-api:1.7.24'
    compile group: 'org.eclipse.californium', name: 'californium-core', version: '2.0.0-M8'
    testCompile 'junit:junit:4.12'
    testCompile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4'
}

// dependencies of build task
build.dependsOn jacocoTestReport

// test tasks
test {
    ignoreFailures = false
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

checkstyle {
    toolVersion = '7.5.1'
}

findbugs {
    ignoreFailures = 'true'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

// generate a Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

// install into Maven repository
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'ch.fhnw.bacnet-it'
            artifactId = project.name
            version = project.version
            from components.java

            artifact sourcesJar {
                classifier = 'sources'
            }
            artifact javadocJar {
                classifier = 'javadoc'
            }
        }
    }
}
